// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::models::{Quota, Sku, Trial};
use azure_core::{
    ClientMethodOptions, Context, Method, Pipeline, Request, RequestContent, Response, Result, Url,
};

pub struct AVSLocationsClient {
    pub(crate) api_version: String,
    pub(crate) endpoint: Url,
    pub(crate) pipeline: Pipeline,
    pub(crate) subscription_id: String,
}

impl AVSLocationsClient {
    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// Return quota for subscription by region
    pub async fn check_quota_availability(
        &self,
        location: String,
        options: Option<AVSLocationsClientCheckQuotaAvailabilityOptions<'_>>,
    ) -> Result<Response<Quota>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("subscriptions/{subscriptionId}/providers/Microsoft.AVS/locations/{location}/checkQuotaAvailability");
        path = path.replace("{location}", &location);
        path = path.replace("{subscriptionId}", &self.subscription_id);
        url = url.join(&path)?;
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/json");
        self.pipeline.send(&ctx, &mut request).await
    }

    /// Return trial status for subscription by region
    pub async fn check_trial_availability(
        &self,
        location: String,
        options: Option<AVSLocationsClientCheckTrialAvailabilityOptions<'_>>,
    ) -> Result<Response<Trial>> {
        let options = options.unwrap_or_default();
        let ctx = Context::with_context(&options.method_options.context);
        let mut url = self.endpoint.clone();
        let mut path = String::from("subscriptions/{subscriptionId}/providers/Microsoft.AVS/locations/{location}/checkTrialAvailability");
        path = path.replace("{location}", &location);
        path = path.replace("{subscriptionId}", &self.subscription_id);
        url = url.join(&path)?;
        url.query_pairs_mut()
            .append_pair("api-version", &self.api_version);
        let mut request = Request::new(url, Method::Post);
        request.insert_header("accept", "application/json");
        if let Some(content_type) = options.content_type {
            request.insert_header("content-type", "application/json");
        }
        if let Some(sku) = options.sku {
            request.set_body(sku);
        }
        self.pipeline.send(&ctx, &mut request).await
    }
}

#[derive(Clone, Debug, Default)]
pub struct AVSLocationsClientCheckQuotaAvailabilityOptions<'a> {
    pub method_options: ClientMethodOptions<'a>,
}

#[derive(Clone, Debug, Default)]
pub struct AVSLocationsClientCheckTrialAvailabilityOptions<'a> {
    pub content_type: undefined,
    pub method_options: ClientMethodOptions<'a>,
    pub sku: Option<RequestContent<Sku>>,
}
