// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::avs_addons_client::AVSAddonsClient;
use crate::avs_authorizations_client::AVSAuthorizationsClient;
use crate::avs_cloud_links_client::AVSCloudLinksClient;
use crate::avs_clusters_client::AVSClustersClient;
use crate::avs_datastores_client::AVSDatastoresClient;
use crate::avs_global_reach_connections_client::AVSGlobalReachConnectionsClient;
use crate::avs_hcx_enterprise_sites_client::AVSHcxEnterpriseSitesClient;
use crate::avs_iscsi_paths_client::AVSIscsiPathsClient;
use crate::avs_locations_client::AVSLocationsClient;
use crate::avs_operations_client::AVSOperationsClient;
use crate::avs_placement_policies_client::AVSPlacementPoliciesClient;
use crate::avs_private_clouds_client::AVSPrivateCloudsClient;
use crate::avs_script_cmdlets_client::AVSScriptCmdletsClient;
use crate::avs_script_executions_client::AVSScriptExecutionsClient;
use crate::avs_script_packages_client::AVSScriptPackagesClient;
use crate::avs_virtual_machines_client::AVSVirtualMachinesClient;
use crate::avs_workload_network_dhcp_configurations_client::AVSWorkloadNetworkDhcpConfigurationsClient;
use crate::avs_workload_network_dns_services_client::AVSWorkloadNetworkDnsServicesClient;
use crate::avs_workload_network_dns_zones_client::AVSWorkloadNetworkDnsZonesClient;
use crate::avs_workload_network_gateways_client::AVSWorkloadNetworkGatewaysClient;
use crate::avs_workload_network_port_mirroring_profiles_client::AVSWorkloadNetworkPortMirroringProfilesClient;
use crate::avs_workload_network_public_ips_client::AVSWorkloadNetworkPublicIpsClient;
use crate::avs_workload_network_segments_client::AVSWorkloadNetworkSegmentsClient;
use crate::avs_workload_network_virtual_machines_client::AVSWorkloadNetworkVirtualMachinesClient;
use crate::avs_workload_network_vm_groups_client::AVSWorkloadNetworkVmGroupsClient;
use crate::avs_workload_networks_client::AVSWorkloadNetworksClient;
use azure_core::credentials::TokenCredential;
use azure_core::{BearerTokenCredentialPolicy, ClientOptions, Pipeline, Policy, Result, Url};
use std::sync::Arc;

pub struct AVSClient {
    api_version: String,
    endpoint: Url,
    pipeline: Pipeline,
    subscription_id: String,
}

#[derive(Clone, Debug)]
pub struct AVSClientOptions {
    pub api_version: String,
    pub client_options: ClientOptions,
}

impl AVSClient {
    pub fn new(
        endpoint: &str,
        credential: Arc<dyn TokenCredential>,
        subscription_id: String,
        options: Option<AVSClientOptions>,
    ) -> Result<Self> {
        let options = options.unwrap_or_default();
        let mut endpoint = Url::parse(endpoint)?;
        endpoint.set_query(None);
        let auth_policy: Arc<dyn Policy> = Arc::new(BearerTokenCredentialPolicy::new(
            credential,
            vec!["user_impersonation"],
        ));
        Ok(Self {
            endpoint,
            subscription_id,
            api_version: options.api_version,
            pipeline: Pipeline::new(
                option_env!("CARGO_PKG_NAME"),
                option_env!("CARGO_PKG_VERSION"),
                options.client_options,
                Vec::default(),
                vec![auth_policy],
            ),
        })
    }

    /// Returns the Url associated with this client.
    pub fn endpoint(&self) -> &Url {
        &self.endpoint
    }

    /// Returns a new instance of AVSAddonsClient.
    pub fn get_avs_addons_client(&self) -> AVSAddonsClient {
        AVSAddonsClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSAuthorizationsClient.
    pub fn get_avs_authorizations_client(&self) -> AVSAuthorizationsClient {
        AVSAuthorizationsClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSCloudLinksClient.
    pub fn get_avs_cloud_links_client(&self) -> AVSCloudLinksClient {
        AVSCloudLinksClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSClustersClient.
    pub fn get_avs_clusters_client(&self) -> AVSClustersClient {
        AVSClustersClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSDatastoresClient.
    pub fn get_avs_datastores_client(&self) -> AVSDatastoresClient {
        AVSDatastoresClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSGlobalReachConnectionsClient.
    pub fn get_avs_global_reach_connections_client(&self) -> AVSGlobalReachConnectionsClient {
        AVSGlobalReachConnectionsClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSHcxEnterpriseSitesClient.
    pub fn get_avs_hcx_enterprise_sites_client(&self) -> AVSHcxEnterpriseSitesClient {
        AVSHcxEnterpriseSitesClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSIscsiPathsClient.
    pub fn get_avs_iscsi_paths_client(&self) -> AVSIscsiPathsClient {
        AVSIscsiPathsClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSLocationsClient.
    pub fn get_avs_locations_client(&self) -> AVSLocationsClient {
        AVSLocationsClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSOperationsClient.
    pub fn get_avs_operations_client(&self) -> AVSOperationsClient {
        AVSOperationsClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSPlacementPoliciesClient.
    pub fn get_avs_placement_policies_client(&self) -> AVSPlacementPoliciesClient {
        AVSPlacementPoliciesClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSPrivateCloudsClient.
    pub fn get_avs_private_clouds_client(&self) -> AVSPrivateCloudsClient {
        AVSPrivateCloudsClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSScriptCmdletsClient.
    pub fn get_avs_script_cmdlets_client(&self) -> AVSScriptCmdletsClient {
        AVSScriptCmdletsClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSScriptExecutionsClient.
    pub fn get_avs_script_executions_client(&self) -> AVSScriptExecutionsClient {
        AVSScriptExecutionsClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSScriptPackagesClient.
    pub fn get_avs_script_packages_client(&self) -> AVSScriptPackagesClient {
        AVSScriptPackagesClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSVirtualMachinesClient.
    pub fn get_avs_virtual_machines_client(&self) -> AVSVirtualMachinesClient {
        AVSVirtualMachinesClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSWorkloadNetworkDhcpConfigurationsClient.
    pub fn get_avs_workload_network_dhcp_configurations_client(
        &self,
    ) -> AVSWorkloadNetworkDhcpConfigurationsClient {
        AVSWorkloadNetworkDhcpConfigurationsClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSWorkloadNetworkDnsServicesClient.
    pub fn get_avs_workload_network_dns_services_client(
        &self,
    ) -> AVSWorkloadNetworkDnsServicesClient {
        AVSWorkloadNetworkDnsServicesClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSWorkloadNetworkDnsZonesClient.
    pub fn get_avs_workload_network_dns_zones_client(&self) -> AVSWorkloadNetworkDnsZonesClient {
        AVSWorkloadNetworkDnsZonesClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSWorkloadNetworkGatewaysClient.
    pub fn get_avs_workload_network_gateways_client(&self) -> AVSWorkloadNetworkGatewaysClient {
        AVSWorkloadNetworkGatewaysClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSWorkloadNetworkPortMirroringProfilesClient.
    pub fn get_avs_workload_network_port_mirroring_profiles_client(
        &self,
    ) -> AVSWorkloadNetworkPortMirroringProfilesClient {
        AVSWorkloadNetworkPortMirroringProfilesClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSWorkloadNetworkPublicIpsClient.
    pub fn get_avs_workload_network_public_ips_client(&self) -> AVSWorkloadNetworkPublicIpsClient {
        AVSWorkloadNetworkPublicIpsClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSWorkloadNetworkSegmentsClient.
    pub fn get_avs_workload_network_segments_client(&self) -> AVSWorkloadNetworkSegmentsClient {
        AVSWorkloadNetworkSegmentsClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSWorkloadNetworkVirtualMachinesClient.
    pub fn get_avs_workload_network_virtual_machines_client(
        &self,
    ) -> AVSWorkloadNetworkVirtualMachinesClient {
        AVSWorkloadNetworkVirtualMachinesClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSWorkloadNetworkVmGroupsClient.
    pub fn get_avs_workload_network_vm_groups_client(&self) -> AVSWorkloadNetworkVmGroupsClient {
        AVSWorkloadNetworkVmGroupsClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }

    /// Returns a new instance of AVSWorkloadNetworksClient.
    pub fn get_avs_workload_networks_client(&self) -> AVSWorkloadNetworksClient {
        AVSWorkloadNetworksClient {
            api_version: self.api_version.clone(),
            endpoint: self.endpoint.clone(),
            pipeline: self.pipeline.clone(),
            subscription_id: self.subscription_id.clone(),
        }
    }
}

impl Default for AVSClientOptions {
    fn default() -> Self {
        Self {
            api_version: String::from("2023-09-01"),
            client_options: ClientOptions::default(),
        }
    }
}
