// Copyright (c) Microsoft Corporation. All rights reserved.
//
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) Rust Code Generator. DO NOT EDIT.

use crate::models::{
    ActionType, AddonProvisioningState, AddonType, AffinityStrength, AffinityType,
    AvailabilityStrategy, AzureHybridBenefitType, CloudLinkProvisioningState, CloudLinkStatus,
    ClusterProvisioningState, CreatedByType, DatastoreProvisioningState, DatastoreStatus,
    DhcpTypeEnum, DnsServiceLogLevelEnum, DnsServiceStatusEnum, DnsZoneType, EncryptionKeyStatus,
    EncryptionState, EncryptionVersionType, ExpressRouteAuthorizationProvisioningState,
    GlobalReachConnectionProvisioningState, GlobalReachConnectionStatus,
    HcxEnterpriseSiteProvisioningState, HcxEnterpriseSiteStatus, InternetEnum,
    IscsiPathProvisioningState, MountOptionEnum, NsxPublicIpQuotaRaisedEnum, OptionalParamEnum,
    Origin, PlacementPolicyProvisioningState, PlacementPolicyState, PlacementPolicyType,
    PortMirroringDirectionEnum, PortMirroringStatusEnum, PrivateCloudProvisioningState,
    QuotaEnabled, ResourceProvisioningState, ScriptCmdletAudience, ScriptCmdletProvisioningState,
    ScriptExecutionParameterType, ScriptExecutionProvisioningState, ScriptPackageProvisioningState,
    ScriptParameterTypes, SegmentStatusEnum, SkuTier, SslEnum, SystemAssignedServiceIdentityType,
    TrialStatus, VMGroupStatusEnum, VMTypeEnum, VirtualMachineProvisioningState,
    VirtualMachineRestrictMovementState, VisibilityParameterEnum,
    WorkloadNetworkDhcpProvisioningState, WorkloadNetworkDnsServiceProvisioningState,
    WorkloadNetworkDnsZoneProvisioningState, WorkloadNetworkPortMirroringProvisioningState,
    WorkloadNetworkProvisioningState, WorkloadNetworkPublicIPProvisioningState,
    WorkloadNetworkSegmentProvisioningState, WorkloadNetworkVMGroupProvisioningState,
};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use time::OffsetDateTime;

/// An addon resource
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct Addon {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// Name of the addon.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<AddonProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// The properties of an Arc addon
#[derive(Clone, Debug, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct AddonArcProperties {
    /// The type of private cloud addon
    #[serde(rename = "addonType")]
    pub addon_type: AddonType,

    /// The state of the addon provisioning
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<AddonProvisioningState>,

    /// The VMware vCenter resource ID
    #[serde(rename = "vCenter", skip_serializing_if = "Option::is_none")]
    pub v_center: Option<String>,
}

/// The properties of an HCX addon
#[derive(Clone, Debug, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct AddonHcxProperties {
    /// The type of private cloud addon
    #[serde(rename = "addonType")]
    pub addon_type: AddonType,

    /// The HCX offer, example VMware MaaS Cloud Provider (Enterprise)
    #[serde(skip_serializing_if = "Option::is_none")]
    pub offer: Option<String>,

    /// The state of the addon provisioning
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<AddonProvisioningState>,
}

/// The response of a Addon list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct AddonList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The Addon items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<Addon>>,
}

/// The properties of an addon
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct AddonProperties {
    /// Addon type
    #[serde(rename = "addonType", skip_serializing_if = "Option::is_none")]
    pub addon_type: Option<AddonType>,

    /// The state of the addon provisioning
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<AddonProvisioningState>,
}

/// The properties of a Site Recovery Manager (SRM) addon
#[derive(Clone, Debug, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct AddonSrmProperties {
    /// The type of private cloud addon
    #[serde(rename = "addonType")]
    pub addon_type: AddonType,

    /// The Site Recovery Manager (SRM) license
    #[serde(rename = "licenseKey", skip_serializing_if = "Option::is_none")]
    pub license_key: Option<String>,

    /// The state of the addon provisioning
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<AddonProvisioningState>,
}

/// The properties of a vSphere Replication (VR) addon
#[derive(Clone, Debug, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct AddonVrProperties {
    /// The type of private cloud addon
    #[serde(rename = "addonType")]
    pub addon_type: AddonType,

    /// The state of the addon provisioning
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<AddonProvisioningState>,

    /// The vSphere Replication Server (VRS) count
    #[serde(rename = "vrsCount", skip_serializing_if = "Option::is_none")]
    pub vrs_count: Option<i32>,
}

/// Administrative credentials for accessing vCenter and NSX-T
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct AdminCredentials {
    /// NSX-T Manager password
    #[serde(rename = "nsxtPassword", skip_serializing_if = "Option::is_none")]
    pub nsxt_password: Option<String>,

    /// NSX-T Manager username
    #[serde(rename = "nsxtUsername", skip_serializing_if = "Option::is_none")]
    pub nsxt_username: Option<String>,

    /// vCenter admin password
    #[serde(rename = "vcenterPassword", skip_serializing_if = "Option::is_none")]
    pub vcenter_password: Option<String>,

    /// vCenter admin username
    #[serde(rename = "vcenterUsername", skip_serializing_if = "Option::is_none")]
    pub vcenter_username: Option<String>,
}

/// Standard Azure Resource Manager operation status response
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ArmOperationStatusResourceProvisioningState {
    /// Operation complete time
    #[serde(rename = "endTime", skip_serializing_if = "Option::is_none")]
    pub end_time: Option<OffsetDateTime>,

    /// Errors that occurred if the operation ended with Canceled or Failed status
    // #[serde(skip_serializing_if = "Option::is_none")]
    // pub error: Option<ErrorDetail>,

    /// The unique identifier for the operationStatus resource
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// The name of the operationStatus resource
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The progress made toward completing the operation
    #[serde(rename = "percentComplete", skip_serializing_if = "Option::is_none")]
    pub percent_complete: Option<f64>,

    /// Operation start time
    #[serde(rename = "startTime", skip_serializing_if = "Option::is_none")]
    pub start_time: Option<OffsetDateTime>,

    /// The operation status
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<ResourceProvisioningState>,
}

/// The properties describing private cloud availability zone distribution
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct AvailabilityProperties {
    /// The secondary availability zone for the private cloud
    #[serde(rename = "secondaryZone", skip_serializing_if = "Option::is_none")]
    pub secondary_zone: Option<i32>,

    /// The availability strategy for the private cloud
    #[serde(skip_serializing_if = "Option::is_none")]
    pub strategy: Option<AvailabilityStrategy>,

    /// The primary availability zone for the private cloud
    #[serde(skip_serializing_if = "Option::is_none")]
    pub zone: Option<i32>,
}

/// An ExpressRoute Circuit
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct Circuit {
    /// Identifier of the ExpressRoute Circuit (Microsoft Colo only)
    #[serde(rename = "expressRouteID", skip_serializing_if = "Option::is_none")]
    pub express_route_id: Option<String>,

    /// ExpressRoute Circuit private peering identifier
    #[serde(
        rename = "expressRoutePrivatePeeringID",
        skip_serializing_if = "Option::is_none"
    )]
    pub express_route_private_peering_id: Option<String>,

    /// CIDR of primary subnet
    #[serde(rename = "primarySubnet", skip_serializing_if = "Option::is_none")]
    pub primary_subnet: Option<String>,

    /// CIDR of secondary subnet
    #[serde(rename = "secondarySubnet", skip_serializing_if = "Option::is_none")]
    pub secondary_subnet: Option<String>,
}

/// A cloud link resource
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct CloudLink {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// Name of the cloud link.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<CloudLinkProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// The response of a CloudLink list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct CloudLinkList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The CloudLink items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<CloudLink>>,
}

/// The properties of a cloud link.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct CloudLinkProperties {
    /// Identifier of the other private cloud participating in the link.
    #[serde(rename = "linkedCloud", skip_serializing_if = "Option::is_none")]
    pub linked_cloud: Option<String>,

    /// The provisioning state of the resource.
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<CloudLinkProvisioningState>,

    /// The state of the cloud link.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<CloudLinkStatus>,
}

/// A cluster resource
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct Cluster {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// Name of the cluster
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ClusterProperties>,

    /// The SKU (Stock Keeping Unit) assigned to this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sku: Option<Sku>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// The response of a Cluster list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ClusterList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The Cluster items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<Cluster>>,
}

/// The properties of a cluster
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ClusterProperties {
    /// The identity
    #[serde(rename = "clusterId", skip_serializing_if = "Option::is_none")]
    pub cluster_id: Option<i32>,

    /// The cluster size
    #[serde(rename = "clusterSize", skip_serializing_if = "Option::is_none")]
    pub cluster_size: Option<i32>,

    /// The hosts
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hosts: Option<Vec<String>>,

    /// The state of the cluster provisioning
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<ClusterProvisioningState>,

    /// Name of the vsan datastore associated with the cluster
    #[serde(rename = "vsanDatastoreName", skip_serializing_if = "Option::is_none")]
    pub vsan_datastore_name: Option<String>,
}

/// An update of a cluster resource
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ClusterUpdate {
    /// The properties of a cluster resource that may be updated
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ClusterUpdateProperties>,

    /// The SKU (Stock Keeping Unit) assigned to this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sku: Option<Sku>,
}

/// The properties of a cluster that may be updated
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ClusterUpdateProperties {
    /// The cluster size
    #[serde(rename = "clusterSize", skip_serializing_if = "Option::is_none")]
    pub cluster_size: Option<i32>,

    /// The hosts
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hosts: Option<Vec<String>>,
}

/// Zone and associated hosts info
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ClusterZone {
    /// List of hosts belonging to the availability zone in a cluster
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hosts: Option<Vec<String>>,

    /// Availability zone identifier
    #[serde(skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// List of all zones and associated hosts for a cluster
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ClusterZoneList {
    /// Zone and associated hosts info
    #[serde(skip_serializing_if = "Option::is_none")]
    pub zones: Option<Vec<ClusterZone>>,
}

/// A datastore resource
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct Datastore {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// Name of the datastore
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<DatastoreProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// The response of a Datastore list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct DatastoreList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The Datastore items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<Datastore>>,
}

/// The properties of a datastore
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct DatastoreProperties {
    /// An iSCSI volume
    #[serde(rename = "diskPoolVolume", skip_serializing_if = "Option::is_none")]
    pub disk_pool_volume: Option<DiskPoolVolume>,

    /// An Elastic SAN volume
    #[serde(rename = "elasticSanVolume", skip_serializing_if = "Option::is_none")]
    pub elastic_san_volume: Option<ElasticSanVolume>,

    /// An Azure NetApp Files volume
    #[serde(rename = "netAppVolume", skip_serializing_if = "Option::is_none")]
    pub net_app_volume: Option<NetAppVolume>,

    /// The state of the datastore provisioning
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<DatastoreProvisioningState>,

    /// The operational status of the datastore
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<DatastoreStatus>,
}

/// An iSCSI volume from Microsoft.StoragePool provider
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct DiskPoolVolume {
    /// Name of the LUN to be used for datastore
    #[serde(rename = "lunName", skip_serializing_if = "Option::is_none")]
    pub lun_name: Option<String>,

    /// Mode that describes whether the LUN has to be mounted as a datastore or
    /// attached as a LUN
    #[serde(rename = "mountOption", skip_serializing_if = "Option::is_none")]
    pub mount_option: Option<MountOptionEnum>,

    /// Device path
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,

    /// Azure resource ID of the iSCSI target
    #[serde(rename = "targetId", skip_serializing_if = "Option::is_none")]
    pub target_id: Option<String>,
}

/// An Elastic SAN volume from Microsoft.ElasticSan provider
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ElasticSanVolume {
    /// Azure resource ID of the Elastic SAN Volume
    #[serde(rename = "targetId", skip_serializing_if = "Option::is_none")]
    pub target_id: Option<String>,
}

/// The properties of customer managed encryption key
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct Encryption {
    /// The key vault where the encryption key is stored
    #[serde(rename = "keyVaultProperties", skip_serializing_if = "Option::is_none")]
    pub key_vault_properties: Option<EncryptionKeyVaultProperties>,

    /// Status of customer managed encryption key
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<EncryptionState>,
}

/// An Encryption Key
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct EncryptionKeyVaultProperties {
    /// The auto-detected version of the key if versionType is auto-detected.
    #[serde(
        rename = "autoDetectedKeyVersion",
        skip_serializing_if = "Option::is_none"
    )]
    pub auto_detected_key_version: Option<String>,

    /// The name of the key.
    #[serde(rename = "keyName", skip_serializing_if = "Option::is_none")]
    pub key_name: Option<String>,

    /// The state of key provided
    #[serde(rename = "keyState", skip_serializing_if = "Option::is_none")]
    pub key_state: Option<EncryptionKeyStatus>,

    /// The URL of the vault.
    #[serde(rename = "keyVaultUrl", skip_serializing_if = "Option::is_none")]
    pub key_vault_url: Option<String>,

    /// The version of the key.
    #[serde(rename = "keyVersion", skip_serializing_if = "Option::is_none")]
    pub key_version: Option<String>,

    /// Property of the key if user provided or auto detected
    #[serde(rename = "versionType", skip_serializing_if = "Option::is_none")]
    pub version_type: Option<EncryptionVersionType>,
}

/// Endpoint addresses
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct Endpoints {
    /// Endpoint FQDN for the HCX Cloud Manager
    #[serde(rename = "hcxCloudManager", skip_serializing_if = "Option::is_none")]
    pub hcx_cloud_manager: Option<String>,

    /// Endpoint IP for the HCX Cloud Manager
    #[serde(rename = "hcxCloudManagerIp", skip_serializing_if = "Option::is_none")]
    pub hcx_cloud_manager_ip: Option<String>,

    /// Endpoint FQDN for the NSX-T Data Center manager
    #[serde(rename = "nsxtManager", skip_serializing_if = "Option::is_none")]
    pub nsxt_manager: Option<String>,

    /// Endpoint IP for the NSX-T Data Center manager
    #[serde(rename = "nsxtManagerIp", skip_serializing_if = "Option::is_none")]
    pub nsxt_manager_ip: Option<String>,

    /// Endpoint IP for Virtual Center Server Appliance
    #[serde(rename = "vcenterIp", skip_serializing_if = "Option::is_none")]
    pub vcenter_ip: Option<String>,

    /// Endpoint FQDN for Virtual Center Server Appliance
    #[serde(skip_serializing_if = "Option::is_none")]
    pub vcsa: Option<String>,
}

/// ExpressRoute Circuit Authorization
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ExpressRouteAuthorization {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// Name of the ExpressRoute Circuit Authorization
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ExpressRouteAuthorizationProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// The response of a ExpressRouteAuthorization list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ExpressRouteAuthorizationList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The ExpressRouteAuthorization items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<ExpressRouteAuthorization>>,
}

/// The properties of an ExpressRoute Circuit Authorization resource
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ExpressRouteAuthorizationProperties {
    /// The ID of the ExpressRoute Circuit Authorization
    #[serde(
        rename = "expressRouteAuthorizationId",
        skip_serializing_if = "Option::is_none"
    )]
    pub express_route_authorization_id: Option<String>,

    /// The key of the ExpressRoute Circuit Authorization
    #[serde(
        rename = "expressRouteAuthorizationKey",
        skip_serializing_if = "Option::is_none"
    )]
    pub express_route_authorization_key: Option<String>,

    /// The ID of the ExpressRoute Circuit
    #[serde(rename = "expressRouteId", skip_serializing_if = "Option::is_none")]
    pub express_route_id: Option<String>,

    /// The state of the ExpressRoute Circuit Authorization provisioning
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<ExpressRouteAuthorizationProvisioningState>,
}

/// A global reach connection resource
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct GlobalReachConnection {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// Name of the global reach connection
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<GlobalReachConnectionProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// The response of a GlobalReachConnection list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct GlobalReachConnectionList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The GlobalReachConnection items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<GlobalReachConnection>>,
}

/// The properties of a global reach connection
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct GlobalReachConnectionProperties {
    /// The network used for global reach carved out from the original network block
    /// provided for the private cloud
    #[serde(rename = "addressPrefix", skip_serializing_if = "Option::is_none")]
    pub address_prefix: Option<String>,

    /// Authorization key from the peer express route used for the global reach
    /// connection
    #[serde(rename = "authorizationKey", skip_serializing_if = "Option::is_none")]
    pub authorization_key: Option<String>,

    /// The connection status of the global reach connection
    #[serde(
        rename = "circuitConnectionStatus",
        skip_serializing_if = "Option::is_none"
    )]
    pub circuit_connection_status: Option<GlobalReachConnectionStatus>,

    /// The ID of the Private Cloud's ExpressRoute Circuit that is participating in the
    /// global reach connection
    #[serde(rename = "expressRouteId", skip_serializing_if = "Option::is_none")]
    pub express_route_id: Option<String>,

    /// Identifier of the ExpressRoute Circuit to peer with in the global reach
    /// connection
    #[serde(
        rename = "peerExpressRouteCircuit",
        skip_serializing_if = "Option::is_none"
    )]
    pub peer_express_route_circuit: Option<String>,

    /// The state of the ExpressRoute Circuit Authorization provisioning
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<GlobalReachConnectionProvisioningState>,
}

/// An HCX Enterprise Site resource
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct HcxEnterpriseSite {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// Name of the HCX Enterprise Site
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<HcxEnterpriseSiteProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// The response of a HcxEnterpriseSite list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct HcxEnterpriseSiteList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The HcxEnterpriseSite items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<HcxEnterpriseSite>>,
}

/// The properties of an HCX Enterprise Site
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct HcxEnterpriseSiteProperties {
    /// The activation key
    #[serde(rename = "activationKey", skip_serializing_if = "Option::is_none")]
    pub activation_key: Option<String>,

    /// The provisioning state of the resource.
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<HcxEnterpriseSiteProvisioningState>,

    /// The status of the HCX Enterprise Site
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<HcxEnterpriseSiteStatus>,
}

/// vCenter Single Sign On Identity Source
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct IdentitySource {
    /// The domain's NetBIOS name
    #[serde(skip_serializing_if = "Option::is_none")]
    pub alias: Option<String>,

    /// The base distinguished name for groups
    #[serde(rename = "baseGroupDN", skip_serializing_if = "Option::is_none")]
    pub base_group_dn: Option<String>,

    /// The base distinguished name for users
    #[serde(rename = "baseUserDN", skip_serializing_if = "Option::is_none")]
    pub base_user_dn: Option<String>,

    /// The domain's dns name
    #[serde(skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,

    /// The name of the identity source
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The password of the Active Directory user with a minimum of read-only access to
    /// Base DN for users and groups.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,

    /// Primary server URL
    #[serde(rename = "primaryServer", skip_serializing_if = "Option::is_none")]
    pub primary_server: Option<String>,

    /// Secondary server URL
    #[serde(rename = "secondaryServer", skip_serializing_if = "Option::is_none")]
    pub secondary_server: Option<String>,

    /// Protect LDAP communication using SSL certificate (LDAPS)
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ssl: Option<SslEnum>,

    /// The ID of an Active Directory user with a minimum of read-only access to Base
    /// DN for users and group
    #[serde(skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// An iSCSI path resource
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct IscsiPath {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// Name of the iSCSI path resource
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<IscsiPathProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// The response of a IscsiPath list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct IscsiPathListResult {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The IscsiPath items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<IscsiPath>>,
}

/// The properties of an iSCSI path resource
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct IscsiPathProperties {
    /// CIDR Block for iSCSI path.
    #[serde(rename = "networkBlock", skip_serializing_if = "Option::is_none")]
    pub network_block: Option<String>,

    /// The state of the iSCSI path provisioning
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<IscsiPathProvisioningState>,
}

/// The properties of a management cluster
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ManagementCluster {
    /// The identity
    #[serde(rename = "clusterId", skip_serializing_if = "Option::is_none")]
    pub cluster_id: Option<i32>,

    /// The cluster size
    #[serde(rename = "clusterSize", skip_serializing_if = "Option::is_none")]
    pub cluster_size: Option<i32>,

    /// The hosts
    #[serde(skip_serializing_if = "Option::is_none")]
    pub hosts: Option<Vec<String>>,

    /// The state of the cluster provisioning
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<ClusterProvisioningState>,

    /// Name of the vsan datastore associated with the cluster
    #[serde(rename = "vsanDatastoreName", skip_serializing_if = "Option::is_none")]
    pub vsan_datastore_name: Option<String>,
}

/// An Azure NetApp Files volume from Microsoft.NetApp provider
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct NetAppVolume {
    /// Azure resource ID of the NetApp volume
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

/// Details of a REST API operation, returned from the Resource Provider Operations API
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct Operation {
    /// Extensible enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
    #[serde(rename = "actionType", skip_serializing_if = "Option::is_none")]
    pub action_type: Option<ActionType>,

    /// Localized display information for this particular operation.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub display: Option<OperationDisplay>,

    /// Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for Azure Resource Manager/control-plane
    /// operations.
    #[serde(rename = "isDataAction", skip_serializing_if = "Option::is_none")]
    pub is_data_action: Option<bool>,

    /// The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write",
    /// "Microsoft.Compute/virtualMachines/capture/action"
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is
    /// "user,system"
    #[serde(skip_serializing_if = "Option::is_none")]
    pub origin: Option<Origin>,
}

/// Localized display information for and operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct OperationDisplay {
    /// The short, localized friendly description of the operation; suitable for tool tips and detailed views.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    /// The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine",
    /// "Restart Virtual Machine".
    #[serde(skip_serializing_if = "Option::is_none")]
    pub operation: Option<String>,

    /// The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
    #[serde(skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,

    /// The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
    #[serde(skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}

/// A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of
/// results.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct OperationListResult {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The Operation items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<Operation>>,
}

/// a powershell credential object
#[derive(Clone, Debug, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct PSCredentialExecutionParameter {
    /// The parameter name
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// password for login
    #[serde(skip_serializing_if = "Option::is_none")]
    pub password: Option<String>,

    /// The type of execution parameter
    #[serde(rename = "type")]
    pub type_prop: ScriptExecutionParameterType,

    /// username for login
    #[serde(skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// The response of a PlacementPolicy list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct PlacementPoliciesList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The PlacementPolicy items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<PlacementPolicy>>,
}

/// A vSphere Distributed Resource Scheduler (DRS) placement policy
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct PlacementPolicy {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// Name of the placement policy.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<PlacementPolicyProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// Abstract placement policy properties
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct PlacementPolicyProperties {
    /// Display name of the placement policy
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,

    /// The provisioning state
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<PlacementPolicyProvisioningState>,

    /// Whether the placement policy is enabled or disabled
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<PlacementPolicyState>,

    /// Placement Policy type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<PlacementPolicyType>,
}

/// An update of a DRS placement policy resource
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct PlacementPolicyUpdate {
    /// The properties of a placement policy resource that may be updated
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<PlacementPolicyUpdateProperties>,
}

/// The properties of a placement policy resource that may be updated
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct PlacementPolicyUpdateProperties {
    /// vm-host placement policy affinity strength (should/must)
    #[serde(rename = "affinityStrength", skip_serializing_if = "Option::is_none")]
    pub affinity_strength: Option<AffinityStrength>,

    /// placement policy azure hybrid benefit opt-in type
    #[serde(
        rename = "azureHybridBenefitType",
        skip_serializing_if = "Option::is_none"
    )]
    pub azure_hybrid_benefit_type: Option<AzureHybridBenefitType>,

    /// Host members list
    #[serde(rename = "hostMembers", skip_serializing_if = "Option::is_none")]
    pub host_members: Option<Vec<String>>,

    /// Whether the placement policy is enabled or disabled
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<PlacementPolicyState>,

    /// Virtual machine members list
    #[serde(rename = "vmMembers", skip_serializing_if = "Option::is_none")]
    pub vm_members: Option<Vec<String>>,
}

/// A private cloud resource
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct PrivateCloud {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// The managed service identities assigned to this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identity: Option<SystemAssignedServiceIdentity>,

    /// The geo-location where the resource lives
    #[serde(skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,

    /// Name of the private cloud
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<PrivateCloudProperties>,

    /// The SKU (Stock Keeping Unit) assigned to this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sku: Option<Sku>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// Resource tags.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// The response of a PrivateCloud list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct PrivateCloudList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The PrivateCloud items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<PrivateCloud>>,
}

/// The properties of a private cloud resource
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct PrivateCloudProperties {
    /// Properties describing how the cloud is distributed across availability zones
    #[serde(skip_serializing_if = "Option::is_none")]
    pub availability: Option<AvailabilityProperties>,

    /// An ExpressRoute Circuit
    #[serde(skip_serializing_if = "Option::is_none")]
    pub circuit: Option<Circuit>,

    /// The type of DNS zone to use.
    #[serde(rename = "dnsZoneType", skip_serializing_if = "Option::is_none")]
    pub dns_zone_type: Option<DnsZoneType>,

    /// Customer managed key encryption, can be enabled or disabled
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encryption: Option<Encryption>,

    /// The endpoints
    #[serde(skip_serializing_if = "Option::is_none")]
    pub endpoints: Option<Endpoints>,

    /// Array of additional networks noncontiguous with networkBlock. Networks must be
    /// unique and non-overlapping across VNet in your subscription, on-premise, and
    /// this privateCloud networkBlock attribute. Make sure the CIDR format conforms to
    /// (A.B.C.D/X).
    #[serde(
        rename = "extendedNetworkBlocks",
        skip_serializing_if = "Option::is_none"
    )]
    pub extended_network_blocks: Option<Vec<String>>,

    /// Array of cloud link IDs from other clouds that connect to this one
    #[serde(rename = "externalCloudLinks", skip_serializing_if = "Option::is_none")]
    pub external_cloud_links: Option<Vec<String>>,

    /// vCenter Single Sign On Identity Sources
    #[serde(rename = "identitySources", skip_serializing_if = "Option::is_none")]
    pub identity_sources: Option<Vec<IdentitySource>>,

    /// Connectivity to internet is enabled or disabled
    #[serde(skip_serializing_if = "Option::is_none")]
    pub internet: Option<InternetEnum>,

    /// The default cluster used for management
    #[serde(rename = "managementCluster", skip_serializing_if = "Option::is_none")]
    pub management_cluster: Option<ManagementCluster>,

    /// Network used to access vCenter Server and NSX-T Manager
    #[serde(rename = "managementNetwork", skip_serializing_if = "Option::is_none")]
    pub management_network: Option<String>,

    /// The block of addresses should be unique across VNet in your subscription as
    /// well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where
    /// A,B,C,D are between 0 and 255, and X is between 0 and 22
    #[serde(rename = "networkBlock", skip_serializing_if = "Option::is_none")]
    pub network_block: Option<String>,

    /// Flag to indicate whether the private cloud has the quota for provisioned NSX
    /// Public IP count raised from 64 to 1024
    #[serde(
        rename = "nsxPublicIpQuotaRaised",
        skip_serializing_if = "Option::is_none"
    )]
    pub nsx_public_ip_quota_raised: Option<NsxPublicIpQuotaRaisedEnum>,

    /// Thumbprint of the NSX-T Manager SSL certificate
    #[serde(
        rename = "nsxtCertificateThumbprint",
        skip_serializing_if = "Option::is_none"
    )]
    pub nsxt_certificate_thumbprint: Option<String>,

    /// Optionally, set the NSX-T Manager password when the private cloud is created
    #[serde(rename = "nsxtPassword", skip_serializing_if = "Option::is_none")]
    pub nsxt_password: Option<String>,

    /// Used for virtual machine cold migration, cloning, and snapshot migration
    #[serde(
        rename = "provisioningNetwork",
        skip_serializing_if = "Option::is_none"
    )]
    pub provisioning_network: Option<String>,

    /// The provisioning state
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<PrivateCloudProvisioningState>,

    /// A secondary expressRoute circuit from a separate AZ. Only present in a
    /// stretched private cloud
    #[serde(rename = "secondaryCircuit", skip_serializing_if = "Option::is_none")]
    pub secondary_circuit: Option<Circuit>,

    /// Thumbprint of the vCenter Server SSL certificate
    #[serde(
        rename = "vcenterCertificateThumbprint",
        skip_serializing_if = "Option::is_none"
    )]
    pub vcenter_certificate_thumbprint: Option<String>,

    /// Optionally, set the vCenter admin password when the private cloud is created
    #[serde(rename = "vcenterPassword", skip_serializing_if = "Option::is_none")]
    pub vcenter_password: Option<String>,

    /// Azure resource ID of the virtual network
    #[serde(rename = "virtualNetworkId", skip_serializing_if = "Option::is_none")]
    pub virtual_network_id: Option<String>,

    /// Used for live migration of virtual machines
    #[serde(rename = "vmotionNetwork", skip_serializing_if = "Option::is_none")]
    pub vmotion_network: Option<String>,
}

/// An update to a private cloud resource
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct PrivateCloudUpdate {
    /// The managed service identities assigned to this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub identity: Option<SystemAssignedServiceIdentity>,

    /// The updatable properties of a private cloud resource
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<PrivateCloudUpdateProperties>,

    /// The SKU (Stock Keeping Unit) assigned to this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub sku: Option<Sku>,

    /// Resource tags.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// The properties of a private cloud resource that may be updated
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct PrivateCloudUpdateProperties {
    /// Properties describing how the cloud is distributed across availability zones
    #[serde(skip_serializing_if = "Option::is_none")]
    pub availability: Option<AvailabilityProperties>,

    /// The type of DNS zone to use.
    #[serde(rename = "dnsZoneType", skip_serializing_if = "Option::is_none")]
    pub dns_zone_type: Option<DnsZoneType>,

    /// Customer managed key encryption, can be enabled or disabled
    #[serde(skip_serializing_if = "Option::is_none")]
    pub encryption: Option<Encryption>,

    /// Array of additional networks noncontiguous with networkBlock. Networks must be
    /// unique and non-overlapping across VNet in your subscription, on-premise, and
    /// this privateCloud networkBlock attribute. Make sure the CIDR format conforms to
    /// (A.B.C.D/X).
    #[serde(
        rename = "extendedNetworkBlocks",
        skip_serializing_if = "Option::is_none"
    )]
    pub extended_network_blocks: Option<Vec<String>>,

    /// vCenter Single Sign On Identity Sources
    #[serde(rename = "identitySources", skip_serializing_if = "Option::is_none")]
    pub identity_sources: Option<Vec<IdentitySource>>,

    /// Connectivity to internet is enabled or disabled
    #[serde(skip_serializing_if = "Option::is_none")]
    pub internet: Option<InternetEnum>,

    /// The default cluster used for management
    #[serde(rename = "managementCluster", skip_serializing_if = "Option::is_none")]
    pub management_cluster: Option<ManagementCluster>,
}

/// Subscription quotas
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct Quota {
    /// Remaining hosts quota by sku type
    #[serde(rename = "hostsRemaining", skip_serializing_if = "Option::is_none")]
    pub hosts_remaining: Option<HashMap<String, i32>>,

    /// Host quota is active for current subscription
    #[serde(rename = "quotaEnabled", skip_serializing_if = "Option::is_none")]
    pub quota_enabled: Option<QuotaEnabled>,
}

/// A cmdlet available for script execution
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ScriptCmdlet {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// Name of the script cmdlet.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ScriptCmdletProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// Properties of a pre-canned script
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ScriptCmdletProperties {
    /// Specifies whether a script cmdlet is intended to be invoked only through automation or visible to customers
    #[serde(skip_serializing_if = "Option::is_none")]
    pub audience: Option<ScriptCmdletAudience>,

    /// Description of the scripts functionality
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    /// Parameters the script will accept
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ScriptParameter>>,

    /// The provisioning state of the resource.
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<ScriptCmdletProvisioningState>,

    /// Recommended time limit for execution
    #[serde(skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
}

/// The response of a ScriptCmdlet list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ScriptCmdletsList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The ScriptCmdlet items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<ScriptCmdlet>>,
}

/// An instance of a script executed by a user - custom or AVS
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ScriptExecution {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// Name of the script cmdlet.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ScriptExecutionProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// The arguments passed in to the execution
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ScriptExecutionParameter {
    /// The parameter name
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// script execution parameter type
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<ScriptExecutionParameterType>,
}

/// Properties of a user-invoked script
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ScriptExecutionProperties {
    /// Standard error output stream from the powershell execution
    #[serde(skip_serializing_if = "Option::is_none")]
    pub errors: Option<Vec<String>>,

    /// Error message if the script was able to run, but if the script itself had
    /// errors or powershell threw an exception
    #[serde(rename = "failureReason", skip_serializing_if = "Option::is_none")]
    pub failure_reason: Option<String>,

    /// Time the script execution was finished
    #[serde(rename = "finishedAt", skip_serializing_if = "Option::is_none")]
    pub finished_at: Option<OffsetDateTime>,

    /// Parameters that will be hidden/not visible to ARM, such as passwords and
    /// credentials
    #[serde(rename = "hiddenParameters", skip_serializing_if = "Option::is_none")]
    pub hidden_parameters: Option<Vec<ScriptExecutionParameter>>,

    /// Standard information out stream from the powershell execution
    #[serde(skip_serializing_if = "Option::is_none")]
    pub information: Option<Vec<String>>,

    /// User-defined dictionary.
    #[serde(rename = "namedOutputs", skip_serializing_if = "Option::is_none")]
    pub named_outputs: Option<HashMap<String, ScriptExecutionPropertiesNamedOutput>>,

    /// Standard output stream from the powershell execution
    #[serde(skip_serializing_if = "Option::is_none")]
    pub output: Option<Vec<String>>,

    /// Parameters the script will accept
    #[serde(skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<ScriptExecutionParameter>>,

    /// The state of the script execution resource
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<ScriptExecutionProvisioningState>,

    /// Time to live for the resource. If not provided, will be available for 60 days
    #[serde(skip_serializing_if = "Option::is_none")]
    pub retention: Option<String>,

    /// A reference to the script cmdlet resource if user is running a AVS script
    #[serde(rename = "scriptCmdletId", skip_serializing_if = "Option::is_none")]
    pub script_cmdlet_id: Option<String>,

    /// Time the script execution was started
    #[serde(rename = "startedAt", skip_serializing_if = "Option::is_none")]
    pub started_at: Option<OffsetDateTime>,

    /// Time the script execution was submitted
    #[serde(rename = "submittedAt", skip_serializing_if = "Option::is_none")]
    pub submitted_at: Option<OffsetDateTime>,

    /// Time limit for execution
    #[serde(skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,

    /// Standard warning out stream from the powershell execution
    #[serde(skip_serializing_if = "Option::is_none")]
    pub warnings: Option<Vec<String>>,
}

#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ScriptExecutionPropertiesNamedOutput {}

/// The response of a ScriptExecution list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ScriptExecutionsList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The ScriptExecution items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<ScriptExecution>>,
}

/// Script Package resources available for execution
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ScriptPackage {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// Name of the script package.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<ScriptPackageProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// Properties of a Script Package subresource
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ScriptPackageProperties {
    /// Company that created and supports the package
    #[serde(skip_serializing_if = "Option::is_none")]
    pub company: Option<String>,

    /// User friendly description of the package
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    /// The provisioning state of the resource.
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<ScriptPackageProvisioningState>,

    /// Link to support by the package vendor
    #[serde(skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,

    /// Module version
    #[serde(skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// The response of a ScriptPackage list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ScriptPackagesList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The ScriptPackage items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<ScriptPackage>>,
}

/// An parameter that the script will accept
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ScriptParameter {
    /// User friendly description of the parameter
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    /// The parameter name that the script will expect a parameter value for
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// Is this parameter required or optional
    #[serde(skip_serializing_if = "Option::is_none")]
    pub optional: Option<OptionalParamEnum>,

    /// The type of parameter the script is expecting. psCredential is a
    /// PSCredentialObject
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<ScriptParameterTypes>,

    /// Should this parameter be visible to arm and passed in the parameters argument
    /// when executing
    #[serde(skip_serializing_if = "Option::is_none")]
    pub visibility: Option<VisibilityParameterEnum>,
}

/// a plain text value execution parameter
#[derive(Clone, Debug, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ScriptSecureStringExecutionParameter {
    /// The parameter name
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// A secure value for the passed parameter, not to be stored in logs
    #[serde(rename = "secureValue", skip_serializing_if = "Option::is_none")]
    pub secure_value: Option<String>,

    /// The type of execution parameter
    #[serde(rename = "type")]
    pub type_prop: ScriptExecutionParameterType,
}

/// a plain text value execution parameter
#[derive(Clone, Debug, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct ScriptStringExecutionParameter {
    /// The parameter name
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The type of execution parameter
    #[serde(rename = "type")]
    pub type_prop: ScriptExecutionParameterType,

    /// The value for the passed parameter
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// The resource model definition representing SKU
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct Sku {
    /// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the
    /// resource this may be omitted.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub capacity: Option<i32>,

    /// If the service has different generations of hardware, for the same SKU, then that can be captured here.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub family: Option<String>,

    /// The name of the SKU. Ex - P3. It is typically a letter+number code
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub size: Option<String>,

    /// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required
    /// on a PUT.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tier: Option<SkuTier>,
}

/// Managed service identity (either system assigned, or none)
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct SystemAssignedServiceIdentity {
    /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
    #[serde(rename = "principalId", skip_serializing_if = "Option::is_none")]
    pub principal_id: Option<String>,

    /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
    #[serde(rename = "tenantId", skip_serializing_if = "Option::is_none")]
    pub tenant_id: Option<String>,

    /// The type of managed identity assigned to this resource.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<SystemAssignedServiceIdentityType>,
}

/// Metadata pertaining to creation and last modification of the resource.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct SystemData {
    /// The timestamp of resource creation (UTC).
    #[serde(rename = "createdAt", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<OffsetDateTime>,

    /// The identity that created the resource.
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,

    /// The type of identity that created the resource.
    #[serde(rename = "createdByType", skip_serializing_if = "Option::is_none")]
    pub created_by_type: Option<CreatedByType>,

    /// The timestamp of resource last modification (UTC)
    #[serde(rename = "lastModifiedAt", skip_serializing_if = "Option::is_none")]
    pub last_modified_at: Option<OffsetDateTime>,

    /// The identity that last modified the resource.
    #[serde(rename = "lastModifiedBy", skip_serializing_if = "Option::is_none")]
    pub last_modified_by: Option<String>,

    /// The type of identity that last modified the resource.
    #[serde(rename = "lastModifiedByType", skip_serializing_if = "Option::is_none")]
    pub last_modified_by_type: Option<CreatedByType>,
}

/// Subscription trial availability
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct Trial {
    /// Number of trial hosts available
    #[serde(rename = "availableHosts", skip_serializing_if = "Option::is_none")]
    pub available_hosts: Option<i32>,

    /// Trial status
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<TrialStatus>,
}

/// Virtual Machine
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct VirtualMachine {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// ID of the virtual machine.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<VirtualMachineProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// Virtual Machine Properties
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct VirtualMachineProperties {
    /// Display name of the VM.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,

    /// Path to virtual machine's folder starting from datacenter virtual machine folder
    #[serde(rename = "folderPath", skip_serializing_if = "Option::is_none")]
    pub folder_path: Option<String>,

    /// Virtual machine managed object reference id
    #[serde(rename = "moRefId", skip_serializing_if = "Option::is_none")]
    pub mo_ref_id: Option<String>,

    /// The provisioning state of the resource.
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<VirtualMachineProvisioningState>,

    /// Whether VM DRS-driven movement is restricted (enabled) or not (disabled)
    #[serde(rename = "restrictMovement", skip_serializing_if = "Option::is_none")]
    pub restrict_movement: Option<VirtualMachineRestrictMovementState>,
}

/// Set VM DRS-driven movement to restricted (enabled) or not (disabled)
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct VirtualMachineRestrictMovement {
    /// Whether VM DRS-driven movement is restricted (enabled) or not (disabled)
    #[serde(rename = "restrictMovement", skip_serializing_if = "Option::is_none")]
    pub restrict_movement: Option<VirtualMachineRestrictMovementState>,
}

/// The response of a VirtualMachine list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct VirtualMachinesList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The VirtualMachine items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<VirtualMachine>>,
}

/// VM-Host placement policy properties
#[derive(Clone, Debug, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct VmHostPlacementPolicyProperties {
    /// vm-host placement policy affinity strength (should/must)
    #[serde(rename = "affinityStrength", skip_serializing_if = "Option::is_none")]
    pub affinity_strength: Option<AffinityStrength>,

    /// placement policy affinity type
    #[serde(rename = "affinityType", skip_serializing_if = "Option::is_none")]
    pub affinity_type: Option<AffinityType>,

    /// placement policy azure hybrid benefit opt-in type
    #[serde(
        rename = "azureHybridBenefitType",
        skip_serializing_if = "Option::is_none"
    )]
    pub azure_hybrid_benefit_type: Option<AzureHybridBenefitType>,

    /// Display name of the placement policy
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,

    /// Host members list
    #[serde(rename = "hostMembers", skip_serializing_if = "Option::is_none")]
    pub host_members: Option<Vec<String>>,

    /// The provisioning state
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<PlacementPolicyProvisioningState>,

    /// Whether the placement policy is enabled or disabled
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<PlacementPolicyState>,

    /// placement policy type
    #[serde(rename = "type")]
    pub type_prop: PlacementPolicyType,

    /// Virtual machine members list
    #[serde(rename = "vmMembers", skip_serializing_if = "Option::is_none")]
    pub vm_members: Option<Vec<String>>,
}

/// VM-VM placement policy properties
#[derive(Clone, Debug, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct VmVmPlacementPolicyProperties {
    /// placement policy affinity type
    #[serde(rename = "affinityType", skip_serializing_if = "Option::is_none")]
    pub affinity_type: Option<AffinityType>,

    /// Display name of the placement policy
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,

    /// The provisioning state
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<PlacementPolicyProvisioningState>,

    /// Whether the placement policy is enabled or disabled
    #[serde(skip_serializing_if = "Option::is_none")]
    pub state: Option<PlacementPolicyState>,

    /// placement policy type
    #[serde(rename = "type")]
    pub type_prop: PlacementPolicyType,

    /// Virtual machine members list
    #[serde(rename = "vmMembers", skip_serializing_if = "Option::is_none")]
    pub vm_members: Option<Vec<String>>,
}

/// Workload Network
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetwork {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// Name of the global reach connection
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<WorkloadNetworkProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// NSX DHCP
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkDhcp {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// The ID of the DHCP configuration
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<WorkloadNetworkDhcpEntity>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// Base class for WorkloadNetworkDhcpServer and WorkloadNetworkDhcpRelay to
/// inherit from
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkDhcpEntity {
    /// Type of DHCP: SERVER or RELAY.
    #[serde(rename = "dhcpType", skip_serializing_if = "Option::is_none")]
    pub dhcp_type: Option<DhcpTypeEnum>,

    /// Display name of the DHCP entity.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,

    /// The provisioning state
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<WorkloadNetworkDhcpProvisioningState>,

    /// NSX revision number.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub revision: Option<i64>,

    /// NSX Segments consuming DHCP.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub segments: Option<Vec<String>>,
}

/// The response of a WorkloadNetworkDhcp list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkDhcpList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The WorkloadNetworkDhcp items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<WorkloadNetworkDhcp>>,
}

/// NSX DHCP Relay
#[derive(Clone, Debug, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkDhcpRelay {
    /// Type of DHCP: SERVER or RELAY.
    #[serde(rename = "dhcpType")]
    pub dhcp_type: DhcpTypeEnum,

    /// Display name of the DHCP entity.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,

    /// The provisioning state
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<WorkloadNetworkDhcpProvisioningState>,

    /// NSX revision number.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub revision: Option<i64>,

    /// NSX Segments consuming DHCP.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub segments: Option<Vec<String>>,

    /// DHCP Relay Addresses. Max 3.
    #[serde(rename = "serverAddresses", skip_serializing_if = "Option::is_none")]
    pub server_addresses: Option<Vec<String>>,
}

/// NSX DHCP Server
#[derive(Clone, Debug, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkDhcpServer {
    /// Type of DHCP: SERVER or RELAY.
    #[serde(rename = "dhcpType")]
    pub dhcp_type: DhcpTypeEnum,

    /// Display name of the DHCP entity.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,

    /// DHCP Server Lease Time.
    #[serde(rename = "leaseTime", skip_serializing_if = "Option::is_none")]
    pub lease_time: Option<i64>,

    /// The provisioning state
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<WorkloadNetworkDhcpProvisioningState>,

    /// NSX revision number.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub revision: Option<i64>,

    /// NSX Segments consuming DHCP.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub segments: Option<Vec<String>>,

    /// DHCP Server Address.
    #[serde(rename = "serverAddress", skip_serializing_if = "Option::is_none")]
    pub server_address: Option<String>,
}

/// NSX DNS Service
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkDnsService {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// ID of the DNS service.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<WorkloadNetworkDnsServiceProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// NSX DNS Service Properties
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkDnsServiceProperties {
    /// Default DNS zone of the DNS Service.
    #[serde(rename = "defaultDnsZone", skip_serializing_if = "Option::is_none")]
    pub default_dns_zone: Option<String>,

    /// Display name of the DNS Service.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,

    /// DNS service IP of the DNS Service.
    #[serde(rename = "dnsServiceIp", skip_serializing_if = "Option::is_none")]
    pub dns_service_ip: Option<String>,

    /// FQDN zones of the DNS Service.
    #[serde(rename = "fqdnZones", skip_serializing_if = "Option::is_none")]
    pub fqdn_zones: Option<Vec<String>>,

    /// DNS Service log level.
    #[serde(rename = "logLevel", skip_serializing_if = "Option::is_none")]
    pub log_level: Option<DnsServiceLogLevelEnum>,

    /// The provisioning state
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<WorkloadNetworkDnsServiceProvisioningState>,

    /// NSX revision number.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub revision: Option<i64>,

    /// DNS Service status.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<DnsServiceStatusEnum>,
}

/// The response of a WorkloadNetworkDnsService list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkDnsServicesList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The WorkloadNetworkDnsService items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<WorkloadNetworkDnsService>>,
}

/// NSX DNS Zone
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkDnsZone {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// ID of the DNS zone.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<WorkloadNetworkDnsZoneProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// NSX DNS Zone Properties
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkDnsZoneProperties {
    /// Display name of the DNS Zone.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,

    /// DNS Server IP array of the DNS Zone.
    #[serde(rename = "dnsServerIps", skip_serializing_if = "Option::is_none")]
    pub dns_server_ips: Option<Vec<String>>,

    /// Number of DNS Services using the DNS zone.
    #[serde(rename = "dnsServices", skip_serializing_if = "Option::is_none")]
    pub dns_services: Option<i64>,

    /// Domain names of the DNS Zone.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub domain: Option<Vec<String>>,

    /// The provisioning state
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<WorkloadNetworkDnsZoneProvisioningState>,

    /// NSX revision number.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub revision: Option<i64>,

    /// Source IP of the DNS Zone.
    #[serde(rename = "sourceIp", skip_serializing_if = "Option::is_none")]
    pub source_ip: Option<String>,
}

/// The response of a WorkloadNetworkDnsZone list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkDnsZonesList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The WorkloadNetworkDnsZone items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<WorkloadNetworkDnsZone>>,
}

/// NSX Gateway.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkGateway {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// The ID of the NSX Gateway
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<WorkloadNetworkGatewayProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// The response of a WorkloadNetworkGateway list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkGatewayList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The WorkloadNetworkGateway items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<WorkloadNetworkGateway>>,
}

/// Properties of a NSX Gateway.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkGatewayProperties {
    /// Display name of the DHCP entity.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,

    /// NSX Gateway Path.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,

    /// The provisioning state of the resource.
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<WorkloadNetworkProvisioningState>,
}

/// The response of a WorkloadNetwork list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The WorkloadNetwork items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<WorkloadNetwork>>,
}

/// NSX Port Mirroring
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkPortMirroring {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// ID of the NSX port mirroring profile.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<WorkloadNetworkPortMirroringProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// The response of a WorkloadNetworkPortMirroring list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkPortMirroringList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The WorkloadNetworkPortMirroring items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<WorkloadNetworkPortMirroring>>,
}

/// NSX Port Mirroring Properties
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkPortMirroringProperties {
    /// Destination VM Group.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub destination: Option<String>,

    /// Direction of port mirroring profile.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub direction: Option<PortMirroringDirectionEnum>,

    /// Display name of the port mirroring profile.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,

    /// The provisioning state
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<WorkloadNetworkPortMirroringProvisioningState>,

    /// NSX revision number.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub revision: Option<i64>,

    /// Source VM Group.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,

    /// Port Mirroring Status.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<PortMirroringStatusEnum>,
}

/// The properties of a workload network
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkProperties {
    /// The provisioning state of the resource.
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<WorkloadNetworkProvisioningState>,
}

/// NSX Public IP Block
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkPublicIP {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// ID of the DNS zone.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<WorkloadNetworkPublicIPProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// NSX Public IP Block Properties
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkPublicIPProperties {
    /// Display name of the Public IP Block.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,

    /// Number of Public IPs requested.
    #[serde(rename = "numberOfPublicIPs", skip_serializing_if = "Option::is_none")]
    pub number_of_public_i_ps: Option<i64>,

    /// The provisioning state
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<WorkloadNetworkPublicIPProvisioningState>,

    /// CIDR Block of the Public IP Block.
    #[serde(rename = "publicIPBlock", skip_serializing_if = "Option::is_none")]
    pub public_ip_block: Option<String>,
}

/// The response of a WorkloadNetworkPublicIP list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkPublicIPsList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The WorkloadNetworkPublicIP items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<WorkloadNetworkPublicIP>>,
}

/// NSX Segment
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkSegment {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// The ID of the NSX Segment
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<WorkloadNetworkSegmentProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// Ports and any VIF attached to segment.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkSegmentPortVif {
    /// Name of port or VIF attached to segment.
    #[serde(rename = "portName", skip_serializing_if = "Option::is_none")]
    pub port_name: Option<String>,
}

/// NSX Segment Properties
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkSegmentProperties {
    /// Gateway which to connect segment to.
    #[serde(rename = "connectedGateway", skip_serializing_if = "Option::is_none")]
    pub connected_gateway: Option<String>,

    /// Display name of the segment.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,

    /// Port Vif which segment is associated with.
    #[serde(rename = "portVif", skip_serializing_if = "Option::is_none")]
    pub port_vif: Option<Vec<WorkloadNetworkSegmentPortVif>>,

    /// The provisioning state
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<WorkloadNetworkSegmentProvisioningState>,

    /// NSX revision number.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub revision: Option<i64>,

    /// Segment status.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<SegmentStatusEnum>,

    /// Subnet which to connect segment to.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub subnet: Option<WorkloadNetworkSegmentSubnet>,
}

/// Subnet configuration for segment
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkSegmentSubnet {
    /// DHCP Range assigned for subnet.
    #[serde(rename = "dhcpRanges", skip_serializing_if = "Option::is_none")]
    pub dhcp_ranges: Option<Vec<String>>,

    /// Gateway address.
    #[serde(rename = "gatewayAddress", skip_serializing_if = "Option::is_none")]
    pub gateway_address: Option<String>,
}

/// The response of a WorkloadNetworkSegment list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkSegmentsList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The WorkloadNetworkSegment items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<WorkloadNetworkSegment>>,
}

/// NSX VM Group
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkVMGroup {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// ID of the VM group.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<WorkloadNetworkVMGroupProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// NSX VM Group Properties
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkVMGroupProperties {
    /// Display name of the VM group.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,

    /// Virtual machine members of this group.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub members: Option<Vec<String>>,

    /// The provisioning state
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<WorkloadNetworkVMGroupProvisioningState>,

    /// NSX revision number.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub revision: Option<i64>,

    /// VM Group status.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub status: Option<VMGroupStatusEnum>,
}

/// The response of a WorkloadNetworkVMGroup list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkVMGroupsList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The WorkloadNetworkVMGroup items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<WorkloadNetworkVMGroup>>,
}

/// NSX Virtual Machine
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkVirtualMachine {
    /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    #[serde(skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,

    /// ID of the virtual machine.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,

    /// The resource-specific properties for this resource.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub properties: Option<WorkloadNetworkVirtualMachineProperties>,

    /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
    #[serde(rename = "systemData", skip_serializing_if = "Option::is_none")]
    pub system_data: Option<SystemData>,

    /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub type_prop: Option<String>,
}

/// NSX Virtual Machine Properties
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkVirtualMachineProperties {
    /// Display name of the VM.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,

    /// The provisioning state of the resource.
    #[serde(rename = "provisioningState", skip_serializing_if = "Option::is_none")]
    pub provisioning_state: Option<WorkloadNetworkProvisioningState>,

    /// Virtual machine type.
    #[serde(rename = "vmType", skip_serializing_if = "Option::is_none")]
    pub vm_type: Option<VMTypeEnum>,
}

/// The response of a WorkloadNetworkVirtualMachine list operation.
#[derive(Clone, Debug, Default, Deserialize, Serialize, typespec_macros::Model)]
#[non_exhaustive]
pub struct WorkloadNetworkVirtualMachinesList {
    /// The link to the next page of items
    #[serde(rename = "nextLink", skip_serializing_if = "Option::is_none")]
    pub next_link: Option<String>,

    /// The WorkloadNetworkVirtualMachine items on this page
    #[serde(skip_serializing_if = "Option::is_none")]
    pub value: Option<Vec<WorkloadNetworkVirtualMachine>>,
}
